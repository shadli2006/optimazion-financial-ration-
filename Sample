
# %% [markdown]  
# # Analisis Prediksi Harga Saham Bank dengan Parameterisasi Lengkap  
#   
# Program ini memungkinkan Anda menyesuaikan:  
# 1. Variabel keuangan yang digunakan untuk prediksi  
# 2. Bank yang akan dianalisis  
# 3. Rasio kesehatan bank yang digunakan  
# 4. Ambang batas rasio kesehatan  
  
# %%  
import pandas as pd  
import numpy as np  
import matplotlib.pyplot as plt  
import seaborn as sns  
import matplotlib.dates as mdates  
from matplotlib.ticker import FuncFormatter  
from sklearn.ensemble import RandomForestRegressor  
from sklearn.model_selection import train_test_split  
from sklearn.metrics import mean_squared_error, r2_score  
import os  
import ipywidgets as widgets  
from IPython.display import display, clear_output  
  
# %% [markdown]  
# ## 1. Parameter Konfigurasi (Dapat Disesuaikan)  
  
# %%  
# Default configuration - dapat diubah sesuai kebutuhan  
CONFIG = {  
    # Pilih variabel keuangan yang akan digunakan untuk prediksi  
    'PREDICTION_FEATURES': ['ROA', 'ROE', 'NIM', 'NPL', 'CAR', 'EPS', 'DAR', 'DER'],  
      
    # Pilih bank yang akan dianalisis (kosongkan untuk semua bank)  
    'SELECTED_BANKS': ['BBCA', 'BNGA'],  
      
    # Pilih rasio untuk kesehatan bank  
    'HEALTH_RATIOS': ['ROA', 'NPL', 'CAR', 'NIM'],  
      
    # Set ambang batas untuk rasio kesehatan  
    'HEALTH_THRESHOLDS': {  
        'ROA': 0.015,  # Minimal 1.5%  
        'NPL': 0.03,   # Maksimal 3%  
        'CAR': 0.12,   # Minimal 12%  
        'NIM': 0.045   # Minimal 4.5%  
    },  
      
    # Parameter model  
    'MODEL_PARAMS': {  
        'test_size': 0.2,  
        'random_state': 42,  
        'n_estimators': 200,  
        'max_depth': 10  
    }  
}  
  
# Fungsi untuk membuat UI interaktif  
def create_config_ui():  
    # Widget untuk fitur prediksi  
    feature_options = ['ROA', 'ROE', 'NIM', 'NPL', 'CAR', 'EPS', 'DAR', 'DER']  
    feature_selector = widgets.SelectMultiple(  
        options=feature_options,  
        value=CONFIG['PREDICTION_FEATURES'],  
        description='Fitur Prediksi:',  
        disabled=False  
    )  
      
    # Widget untuk bank  
    bank_selector = widgets.SelectMultiple(  
        options=[],  
        value=CONFIG['SELECTED_BANKS'],  
        description='Bank:',  
        disabled=False  
    )  
      
    # Widget untuk rasio kesehatan  
    health_ratio_selector = widgets.SelectMultiple(  
        options=feature_options,  
        value=CONFIG['HEALTH_RATIOS'],  
        description='Rasio Kesehatan:',  
        disabled=False  
    )  
      
    # Widget untuk ambang batas  
    threshold_widgets = {}  
    for ratio, value in CONFIG['HEALTH_THRESHOLDS'].items():  
        threshold_widgets[ratio] = widgets.FloatSlider(  
            value=value,  
            min=0.0,  
            max=0.2 if ratio in ['ROA', 'ROE'] else 0.1 if ratio == 'NPL' else 0.3,  
            step=0.001,  
            description=f'{ratio} Threshold:',  
            readout_format='.3f'  
        )  
      
    # Tombol untuk memuat data  
    load_button = widgets.Button(description="Terapkan Konfigurasi & Analisis")  
    output = widgets.Output()  
      
    # Fungsi untuk menangani klik tombol  
    def on_button_click(b):  
        CONFIG['PREDICTION_FEATURES'] = list(feature_selector.value)  
        CONFIG['SELECTED_BANKS'] = list(bank_selector.value)  
        CONFIG['HEALTH_RATIOS'] = list(health_ratio_selector.value)  
          
        for ratio, widget in threshold_widgets.items():  
            CONFIG['HEALTH_THRESHOLDS'][ratio] = widget.value  
          
        with output:  
            clear_output()  
            print("Konfigurasi diperbarui!")  
            main_analysis()  
      
    load_button.on_click(on_button_click)  
      
    # Tampilkan UI  
    display(widgets.VBox([  
        widgets.HBox([feature_selector, bank_selector, health_ratio_selector]),  
        widgets.VBox(list(threshold_widgets.values())),  
        load_button,  
        output  
    ]))  
      
    return bank_selector  
  
# %% [markdown]  
# ## 2. Fungsi Utilitas  
  
# %%  
def currency_formatter(x, pos):  
    return f'Rp{x:,.0f}'  
  
def percent_formatter(x, pos):  
    return f'{x:.1%}'  
  
def load_data(file_path):  
    """Memuat data dari file CSV"""  
    try:  
        df = pd.read_csv(file_path)  
        print(f"Data berhasil dimuat: {len(df)} baris")  
        return df  
    except Exception as e:  
        print(f"Error memuat data: {str(e)}")  
        return None  
  
def preprocess_data(df):  
    """Membersihkan dan mempersiapkan data"""  
    # Konversi persentase  
    percent_cols = ['ROA', 'ROE', 'NIM', 'NPL', 'CAR']  
    for col in percent_cols:  
        if col in df.columns and df[col].dtype == 'object':  
            df[col] = df[col].str.replace('%', '', regex=False).astype(float) / 100  
      
    # Konversi harga saham  
    if 'Harga_Saham' in df.columns:  
        df['Harga_Saham'] = pd.to_numeric(df['Harga_Saham'], errors='coerce')  
      
    # Isi missing values harga saham  
    if 'Harga_Saham' in df.columns:  
        df['Harga_Saham'] = df.groupby('Nama_Bank')['Harga_Saham'].ffill().bfill()  
      
    # Buat target variable  
    df['Harga_Saham_Next'] = df.groupby('Nama_Bank')['Harga_Saham'].shift(-1)  
    df = df.dropna(subset=['Harga_Saham_Next'])  
      
    # Konversi periode  
    if 'Periode' in df.columns:  
        df['Periode'] = df['Periode'].str.replace('Q1', '03-31').str.replace('Q2', '06-30')  
        df['Periode'] = df['Periode'].str.replace('Q3', '09-30').str.replace('Q4', '12-31')  
        df['Periode'] = pd.to_datetime(df['Periode'] + '-2024', format='%m-%d-%Y', errors='coerce')  
      
    return df  
  
# %% [markdown]  
# ## 3. Analisis Data Utama  
  
# %%  
def main_analysis():  
    # 1. Load dan preprocess data  
    file_path = 'data_saham_bbca_bnga_2024.csv'  
    df = load_data(file_path)  
    if df is None:  
        return  
      
    df = preprocess_data(df)  
    if df is None:  
        return  
      
    # 2. Filter bank yang dipilih  
    if CONFIG['SELECTED_BANKS']:  
        df = df[df['Nama_Bank'].isin(CONFIG['SELECTED_BANKS'])]  
      
    # 3. Bangun model prediksi  
    build_prediction_model(df)  
      
    # 4. Analisis pengaruh rasio  
    analyze_ratio_impact(df)  
      
    # 5. Optimasi portofolio  
    optimize_portfolio(df)  
  
# %% [markdown]  
# ## 4. Model Prediksi dengan Fitur Dipilih  
  
# %%  
def build_prediction_model(df):  
    """Membangun model prediksi dengan fitur yang dipilih"""  
    # Pastikan fitur yang dipilih tersedia  
    available_features = [f for f in CONFIG['PREDICTION_FEATURES'] if f in df.columns]  
    available_features.append('Harga_Saham')  # Selalu sertakan harga saat ini  
      
    print("Fitur yang digunakan untuk prediksi:", available_features)  
      
    # Target  
    X = df[available_features]  
    y = df['Harga_Saham_Next']  
      
    # Split data  
    X_train, X_test, y_train, y_test = train_test_split(  
        X, y,   
        test_size=CONFIG['MODEL_PARAMS']['test_size'],   
        random_state=CONFIG['MODEL_PARAMS']['random_state']  
    )  
      
    # Bangun model  
    model = RandomForestRegressor(  
        n_estimators=CONFIG['MODEL_PARAMS']['n_estimators'],  
        max_depth=CONFIG['MODEL_PARAMS']['max_depth'],  
        random_state=CONFIG['MODEL_PARAMS']['random_state']  
    )  
    model.fit(X_train, y_train)  
      
    # Prediksi  
    y_pred = model.predict(X_test)  
    mse = mean_squared_error(y_test, y_pred)  
    r2 = r2_score(y_test, y_pred)  
      
    # Tambahkan prediksi ke dataframe  
    df['Prediksi_Harga'] = model.predict(X)  
      
    print(f"Evaluasi Model:\nMSE: {mse:.4f}\nRÂ²: {r2:.4f}")  
      
    # Feature importance  
    importance = pd.Series(model.feature_importances_, index=X.columns)  
    importance = importance.sort_values(ascending=False)  
      
    plt.figure(figsize=(12, 6))  
    importance.plot(kind='bar')  
    plt.title('Tingkat Penting Variabel untuk Prediksi Harga Saham')  
    plt.ylabel('Importance Score')  
    plt.show()  
      
    # Visualisasi prediksi  
    plot_predictions(df)  
      
    return model, df  
  
# %% [markdown]  
# ## 5. Visualisasi Prediksi  
  
# %%  
def plot_predictions(df):  
    """Visualisasi perbandingan harga aktual dan prediksi per bank"""  
    plt.figure(figsize=(14, 8))  
      
    banks = df['Nama_Bank'].unique()  
    for i, bank in enumerate(banks):  
        bank_data = df[df['Nama_Bank'] == bank].sort_values('Periode')  
          
        plt.subplot(len(banks), 1, i+1)  
        plt.plot(bank_data['Periode'], bank_data['Harga_Saham'], 'o-', label='Aktual', linewidth=2)  
        plt.plot(bank_data['Periode'], bank_data['Prediksi_Harga'], 's--', label='Prediksi', linewidth=2)  
        plt.title(f'{bank}: Harga Saham Aktual vs Prediksi', fontsize=14)  
        plt.ylabel('Harga Saham (Rp)', fontsize=12)  
        plt.legend()  
        plt.grid(True)  
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))  
        plt.gca().yaxis.set_major_formatter(FuncFormatter(currency_formatter))  
          
        # Tambah label data  
        for _, row in bank_data.iterrows():  
            plt.annotate(f'Rp{row["Harga_Saham"]:,.0f}', (row['Periode'], row['Harga_Saham']),  
                         xytext=(0, 10), textcoords='offset points', ha='center', fontsize=8)  
            plt.annotate(f'Rp{row["Prediksi_Harga"]:,.0f}', (row['Periode'], row['Prediksi_Harga']),  
                         xytext=(0, -15), textcoords='offset points', ha='center', fontsize=8, color='orange')  
      
    plt.tight_layout()  
    plt.show()  
  
# %% [markdown]  
# ## 6. Analisis Pengaruh Rasio  
  
# %%  
def analyze_ratio_impact(df):  
    """Analisis pengaruh rasio keuangan terhadap harga prediksi"""  
    # Hanya tampilkan rasio yang dipilih dan tersedia  
    ratios_to_show = [r for r in CONFIG['PREDICTION_FEATURES'] if r in df.columns and r != 'Harga_Saham']  
      
    n_cols = 2  
    n_rows = (len(ratios_to_show) + 1) // n_cols  
      
    plt.figure(figsize=(16, 6 * n_rows))  
      
    for i, ratio in enumerate(ratios_to_show):  
        plt.subplot(n_rows, n_cols, i+1)  
          
        # Scatter plot dengan regresi  
        sns.regplot(x=ratio, y='Prediksi_Harga', data=df,   
                    scatter_kws={'s': 80, 'alpha': 0.6},   
                    line_kws={'color': 'red', 'linestyle': '--'})  
          
        # Korelasi  
        corr = df[[ratio, 'Prediksi_Harga']].corr().iloc[0,1]  
          
        plt.title(f'Pengaruh {ratio} terhadap Harga Saham Prediksi', fontsize=14)  
        plt.xlabel(ratio, fontsize=12)  
        plt.ylabel('Harga Prediksi (Rp)', fontsize=12)  
        plt.annotate(f'Korelasi: {corr:.2f}', xy=(0.05, 0.95), xycoords='axes fraction',  
                    fontsize=12, bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="gray"))  
          
        # Format sumbu  
        plt.gca().xaxis.set_major_formatter(FuncFormatter(percent_formatter))  
        plt.gca().yaxis.set_major_formatter(FuncFormatter(currency_formatter))  
          
        plt.grid(True, linestyle='--', alpha=0.7)  
      
    plt.tight_layout()  
    plt.show()  
  
# %% [markdown]  
# ## 7. Optimasi Portofolio dengan Rasio Kesehatan Dipilih  
  
# %%  
def calculate_health_score(row):  
    """Menghitung skor kesehatan bank berdasarkan konfigurasi"""  
    score = 0  
    for ratio in CONFIG['HEALTH_RATIOS']:  
        if ratio in CONFIG['HEALTH_THRESHOLDS'] and ratio in row:  
            threshold = CONFIG['HEALTH_THRESHOLDS'][ratio]  
              
            # Logika penilaian berdasarkan jenis rasio  
            if ratio in ['ROA', 'ROE', 'CAR', 'NIM']:  # Semakin tinggi semakin baik  
                if row[ratio] >= threshold:  
                    score += 1  
            elif ratio in ['NPL', 'DAR', 'DER']:  # Semakin rendah semakin baik  
                if row[ratio] <= threshold:  
                    score += 1  
    return score  
  
def optimize_portfolio(df):  
    """Melakukan optimasi portofolio dengan parameter yang dipilih"""  
    # Hitung skor kesehatan  
    df['Health_Score'] = df.apply(calculate_health_score, axis=1)  
      
    # Hitung return ekspektasi  
    df['Expected_Return'] = (df['Prediksi_Harga'] - df['Harga_Saham']) / df['Harga_Saham']  
      
    # Data terbaru per bank  
    latest = df.groupby('Nama_Bank').last().reset_index()  
      
    # Matriks kovariansi  
    cov_matrix = df.pivot_table(index='Periode', columns='Nama_Bank', values='Harga_Saham').cov().values  
      
    # Optimasi Markowitz  
    from scipy.optimize import minimize  
      
    def portfolio_performance(weights, returns, cov_matrix):  
        port_return = np.dot(weights, returns)  
        port_volatility = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))  
        return port_return, port_volatility  
      
    def negative_sharpe(weights, returns, cov_matrix):  
        p_return, p_volatility = portfolio_performance(weights, returns, cov_matrix)  
        return -p_return / p_volatility  
      
    returns = latest['Expected_Return'].values  
    n_assets = len(returns)  
    constraints = ({'type': 'eq', 'fun': lambda w: np.sum(w) - 1})  
    bounds = tuple((0, 1) for _ in range(n_assets))  
    init_guess = [1/n_assets] * n_assets  
      
    opt_result = minimize(negative_sharpe, init_guess,  
                         args=(returns, cov_matrix),  
                         method='SLSQP', bounds=bounds, constraints=constraints)  
      
    if not opt_result.success:  
        print("Optimasi gagal:", opt_result.message)  
        return  
      
    markowitz_weights = opt_result.x  
      
    # Hasil  
    results = pd.DataFrame({  
        'Bank': latest['Nama_Bank'],  
        'Health_Score': latest['Health_Score'],  
        'Expected_Return': latest['Expected_Return'],  
        'Markowitz_Weight': markowitz_weights  
    })  
      
    # Tambahkan rasio kesehatan  
    for ratio in CONFIG['HEALTH_RATIOS']:  
        if ratio in latest.columns:  
            results[ratio] = latest[ratio]  
      
    print("\nHasil Optimasi Portofolio:")  
    display(results)  
      
    # Visualisasi  
    plt.figure(figsize=(14, 10))  
      
    # Bobot portofolio  
    plt.subplot(2, 1, 1)  
    plt.bar(results['Bank'], results['Markowitz_Weight'], color='skyblue')  
    plt.title('Alokasi Portofolio Optimal (Markowitz)', fontsize=14)  
    plt.ylabel('Bobot', fontsize=12)  
    plt.ylim(0, 1)  
      
    # Skor kesehatan  
    plt.subplot(2, 1, 2)  
    plt.bar(results['Bank'], results['Health_Score'], color='lightgreen')  
    plt.title('Skor Kesehatan Bank', fontsize=14)  
    plt.ylabel('Skor', fontsize=12)  
    plt.ylim(0, len(CONFIG['HEALTH_RATIOS']))  
      
    plt.tight_layout()  
    plt.show()  
      
    # Tampilkan detail rasio kesehatan  
    print("\nDetail Rasio Kesehatan:")  
    health_df = pd.DataFrame({  
        'Rasio': CONFIG['HEALTH_RATIOS'],  
        'Threshold': [CONFIG['HEALTH_THRESHOLDS'].get(r, 'N/A') for r in CONFIG['HEALTH_RATIOS']]  
    })  
    display(health_df)  
  
# %% [markdown]  
# ## 8. Jalankan Analisis  
  
# %%  
# Tampilkan UI untuk konfigurasi  
bank_selector = create_config_ui()  
  
# Inisialisasi data bank untuk selector  
file_path = 'data_saham_bbca_bnga_2024.csv'  
df_init = load_data(file_path)  
if df_init is not None:  
    df_init = preprocess_data(df_init)  
    if df_init is not None and 'Nama_Bank' in df_init.columns:  
        bank_selector.options = df_init['Nama_Bank'].unique().tolist()
